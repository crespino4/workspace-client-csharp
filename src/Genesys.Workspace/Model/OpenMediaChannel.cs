/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Workspace.Model
{
    /// <summary>
    /// OpenMediaChannel
    /// </summary>
    [DataContract]
    public partial class OpenMediaChannel :  IEquatable<OpenMediaChannel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenMediaChannel" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="State">State.</param>
        /// <param name="Dnd">Dnd.</param>
        /// <param name="Reasons">A key/value pairs list of a data structure that provides additional information associated with the state..</param>
        /// <param name="Interactions">Interactions.</param>
        /// <param name="Capabilities">Capabilities.</param>
        public OpenMediaChannel(string Name = default(string), string State = default(string), bool? Dnd = default(bool?), List<Kvpair> Reasons = default(List<Kvpair>), List<string> Interactions = default(List<string>), List<string> Capabilities = default(List<string>))
        {
            this.Name = Name;
            this.State = State;
            this.Dnd = Dnd;
            this.Reasons = Reasons;
            this.Interactions = Interactions;
            this.Capabilities = Capabilities;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Dnd
        /// </summary>
        [DataMember(Name="dnd", EmitDefaultValue=false)]
        public bool? Dnd { get; set; }

        /// <summary>
        /// A key/value pairs list of a data structure that provides additional information associated with the state.
        /// </summary>
        /// <value>A key/value pairs list of a data structure that provides additional information associated with the state.</value>
        [DataMember(Name="reasons", EmitDefaultValue=false)]
        public List<Kvpair> Reasons { get; set; }

        /// <summary>
        /// Gets or Sets Interactions
        /// </summary>
        [DataMember(Name="interactions", EmitDefaultValue=false)]
        public List<string> Interactions { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public List<string> Capabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenMediaChannel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Dnd: ").Append(Dnd).Append("\n");
            sb.Append("  Reasons: ").Append(Reasons).Append("\n");
            sb.Append("  Interactions: ").Append(Interactions).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OpenMediaChannel);
        }

        /// <summary>
        /// Returns true if OpenMediaChannel instances are equal
        /// </summary>
        /// <param name="other">Instance of OpenMediaChannel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenMediaChannel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.Dnd == other.Dnd ||
                    this.Dnd != null &&
                    this.Dnd.Equals(other.Dnd)
                ) && 
                (
                    this.Reasons == other.Reasons ||
                    this.Reasons != null &&
                    this.Reasons.SequenceEqual(other.Reasons)
                ) && 
                (
                    this.Interactions == other.Interactions ||
                    this.Interactions != null &&
                    this.Interactions.SequenceEqual(other.Interactions)
                ) && 
                (
                    this.Capabilities == other.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.SequenceEqual(other.Capabilities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.Dnd != null)
                    hash = hash * 59 + this.Dnd.GetHashCode();
                if (this.Reasons != null)
                    hash = hash * 59 + this.Reasons.GetHashCode();
                if (this.Interactions != null)
                    hash = hash * 59 + this.Interactions.GetHashCode();
                if (this.Capabilities != null)
                    hash = hash * 59 + this.Capabilities.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
