/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Workspace.Model
{
    /// <summary>
    /// TargetspersonalfavoritessaveData
    /// </summary>
    [DataContract]
    public partial class TargetspersonalfavoritessaveData :  IEquatable<TargetspersonalfavoritessaveData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetspersonalfavoritessaveData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TargetspersonalfavoritessaveData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TargetspersonalfavoritessaveData" /> class.
        /// </summary>
        /// <param name="Target">The personal favorite target (required).</param>
        /// <param name="Category">category of the favorite target (required).</param>
        public TargetspersonalfavoritessaveData(TargetInformation Target = default(TargetInformation), string Category = default(string))
        {
            // to ensure "Target" is required (not null)
            if (Target == null)
            {
                throw new InvalidDataException("Target is a required property for TargetspersonalfavoritessaveData and cannot be null");
            }
            else
            {
                this.Target = Target;
            }
            // to ensure "Category" is required (not null)
            if (Category == null)
            {
                throw new InvalidDataException("Category is a required property for TargetspersonalfavoritessaveData and cannot be null");
            }
            else
            {
                this.Category = Category;
            }
        }
        
        /// <summary>
        /// The personal favorite target
        /// </summary>
        /// <value>The personal favorite target</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public TargetInformation Target { get; set; }

        /// <summary>
        /// category of the favorite target
        /// </summary>
        /// <value>category of the favorite target</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TargetspersonalfavoritessaveData {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TargetspersonalfavoritessaveData);
        }

        /// <summary>
        /// Returns true if TargetspersonalfavoritessaveData instances are equal
        /// </summary>
        /// <param name="other">Instance of TargetspersonalfavoritessaveData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TargetspersonalfavoritessaveData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
