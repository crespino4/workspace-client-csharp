/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Workspace.Model
{
    /// <summary>
    /// UcsgetcontactsData
    /// </summary>
    [DataContract]
    public partial class UcsgetcontactsData :  IEquatable<UcsgetcontactsData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsgetcontactsData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UcsgetcontactsData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UcsgetcontactsData" /> class.
        /// </summary>
        /// <param name="SearchCriteria">The search criteria (required).</param>
        /// <param name="AttributeList">The list of contact attributes to be returned for each contact in response (required).</param>
        /// <param name="StartIndex">The start index (required).</param>
        /// <param name="MaxCount">The maximum number of contacts to be returned (required).</param>
        /// <param name="SortCriteria">The sorting criteria.</param>
        public UcsgetcontactsData(Object SearchCriteria = default(Object), List<string> AttributeList = default(List<string>), int? StartIndex = default(int?), int? MaxCount = default(int?), List<Object> SortCriteria = default(List<Object>))
        {
            // to ensure "SearchCriteria" is required (not null)
            if (SearchCriteria == null)
            {
                throw new InvalidDataException("SearchCriteria is a required property for UcsgetcontactsData and cannot be null");
            }
            else
            {
                this.SearchCriteria = SearchCriteria;
            }
            // to ensure "AttributeList" is required (not null)
            if (AttributeList == null)
            {
                throw new InvalidDataException("AttributeList is a required property for UcsgetcontactsData and cannot be null");
            }
            else
            {
                this.AttributeList = AttributeList;
            }
            // to ensure "StartIndex" is required (not null)
            if (StartIndex == null)
            {
                throw new InvalidDataException("StartIndex is a required property for UcsgetcontactsData and cannot be null");
            }
            else
            {
                this.StartIndex = StartIndex;
            }
            // to ensure "MaxCount" is required (not null)
            if (MaxCount == null)
            {
                throw new InvalidDataException("MaxCount is a required property for UcsgetcontactsData and cannot be null");
            }
            else
            {
                this.MaxCount = MaxCount;
            }
            this.SortCriteria = SortCriteria;
        }
        
        /// <summary>
        /// The search criteria
        /// </summary>
        /// <value>The search criteria</value>
        [DataMember(Name="searchCriteria", EmitDefaultValue=false)]
        public Object SearchCriteria { get; set; }

        /// <summary>
        /// The list of contact attributes to be returned for each contact in response
        /// </summary>
        /// <value>The list of contact attributes to be returned for each contact in response</value>
        [DataMember(Name="attributeList", EmitDefaultValue=false)]
        public List<string> AttributeList { get; set; }

        /// <summary>
        /// The start index
        /// </summary>
        /// <value>The start index</value>
        [DataMember(Name="startIndex", EmitDefaultValue=false)]
        public int? StartIndex { get; set; }

        /// <summary>
        /// The maximum number of contacts to be returned
        /// </summary>
        /// <value>The maximum number of contacts to be returned</value>
        [DataMember(Name="maxCount", EmitDefaultValue=false)]
        public int? MaxCount { get; set; }

        /// <summary>
        /// The sorting criteria
        /// </summary>
        /// <value>The sorting criteria</value>
        [DataMember(Name="sortCriteria", EmitDefaultValue=false)]
        public List<Object> SortCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UcsgetcontactsData {\n");
            sb.Append("  SearchCriteria: ").Append(SearchCriteria).Append("\n");
            sb.Append("  AttributeList: ").Append(AttributeList).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  MaxCount: ").Append(MaxCount).Append("\n");
            sb.Append("  SortCriteria: ").Append(SortCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UcsgetcontactsData);
        }

        /// <summary>
        /// Returns true if UcsgetcontactsData instances are equal
        /// </summary>
        /// <param name="other">Instance of UcsgetcontactsData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UcsgetcontactsData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SearchCriteria == other.SearchCriteria ||
                    this.SearchCriteria != null &&
                    this.SearchCriteria.Equals(other.SearchCriteria)
                ) && 
                (
                    this.AttributeList == other.AttributeList ||
                    this.AttributeList != null &&
                    this.AttributeList.SequenceEqual(other.AttributeList)
                ) && 
                (
                    this.StartIndex == other.StartIndex ||
                    this.StartIndex != null &&
                    this.StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    this.MaxCount == other.MaxCount ||
                    this.MaxCount != null &&
                    this.MaxCount.Equals(other.MaxCount)
                ) && 
                (
                    this.SortCriteria == other.SortCriteria ||
                    this.SortCriteria != null &&
                    this.SortCriteria.SequenceEqual(other.SortCriteria)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SearchCriteria != null)
                    hash = hash * 59 + this.SearchCriteria.GetHashCode();
                if (this.AttributeList != null)
                    hash = hash * 59 + this.AttributeList.GetHashCode();
                if (this.StartIndex != null)
                    hash = hash * 59 + this.StartIndex.GetHashCode();
                if (this.MaxCount != null)
                    hash = hash * 59 + this.MaxCount.GetHashCode();
                if (this.SortCriteria != null)
                    hash = hash * 59 + this.SortCriteria.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
