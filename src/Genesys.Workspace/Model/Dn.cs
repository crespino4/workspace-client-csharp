/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Workspace.Client.SwaggerDateConverter;

namespace Genesys.Workspace.Model
{
    /// <summary>
    /// Dn
    /// </summary>
    [DataContract]
    public partial class Dn :  IEquatable<Dn>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dn" /> class.
        /// </summary>
        /// <param name="Number">Number.</param>
        /// <param name="AgentId">AgentId.</param>
        /// <param name="AgentState">AgentState.</param>
        /// <param name="AgentWorkMode">AgentWorkMode.</param>
        public Dn(string Number = default(string), string AgentId = default(string), string AgentState = default(string), string AgentWorkMode = default(string))
        {
            this.Number = Number;
            this.AgentId = AgentId;
            this.AgentState = AgentState;
            this.AgentWorkMode = AgentWorkMode;
        }
        
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets AgentId
        /// </summary>
        [DataMember(Name="agentId", EmitDefaultValue=false)]
        public string AgentId { get; set; }

        /// <summary>
        /// Gets or Sets AgentState
        /// </summary>
        [DataMember(Name="agentState", EmitDefaultValue=false)]
        public string AgentState { get; set; }

        /// <summary>
        /// Gets or Sets AgentWorkMode
        /// </summary>
        [DataMember(Name="agentWorkMode", EmitDefaultValue=false)]
        public string AgentWorkMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dn {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  AgentState: ").Append(AgentState).Append("\n");
            sb.Append("  AgentWorkMode: ").Append(AgentWorkMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Dn);
        }

        /// <summary>
        /// Returns true if Dn instances are equal
        /// </summary>
        /// <param name="other">Instance of Dn to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dn other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.AgentId == other.AgentId ||
                    this.AgentId != null &&
                    this.AgentId.Equals(other.AgentId)
                ) && 
                (
                    this.AgentState == other.AgentState ||
                    this.AgentState != null &&
                    this.AgentState.Equals(other.AgentState)
                ) && 
                (
                    this.AgentWorkMode == other.AgentWorkMode ||
                    this.AgentWorkMode != null &&
                    this.AgentWorkMode.Equals(other.AgentWorkMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.AgentId != null)
                    hash = hash * 59 + this.AgentId.GetHashCode();
                if (this.AgentState != null)
                    hash = hash * 59 + this.AgentState.GetHashCode();
                if (this.AgentWorkMode != null)
                    hash = hash * 59 + this.AgentWorkMode.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
