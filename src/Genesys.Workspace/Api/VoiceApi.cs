/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;
using Genesys.Workspace.Model;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IVoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Alternate between calls
        /// </summary>
        /// <remarks>
        /// Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Alternate (string id, AlternateData alternateData);

        /// <summary>
        /// Alternate between calls
        /// </summary>
        /// <remarks>
        /// Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AlternateWithHttpInfo (string id, AlternateData alternateData);
        /// <summary>
        /// Answer a call
        /// </summary>
        /// <remarks>
        /// Answer the call specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Answer (string id, AnswerData answerData = null);

        /// <summary>
        /// Answer a call
        /// </summary>
        /// <remarks>
        /// Answer the call specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AnswerWithHttpInfo (string id, AnswerData answerData = null);
        /// <summary>
        /// Attach user data to a call
        /// </summary>
        /// <remarks>
        /// Attach the provided key/value pairs to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse AttachUserData (string id, UserData userData);

        /// <summary>
        /// Attach user data to a call
        /// </summary>
        /// <remarks>
        /// Attach the provided key/value pairs to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AttachUserDataWithHttpInfo (string id, UserData userData);
        /// <summary>
        /// Cancel call forwardarding
        /// </summary>
        /// <remarks>
        /// Cancel call forwardarding
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CancelForward ();

        /// <summary>
        /// Cancel call forwardarding
        /// </summary>
        /// <remarks>
        /// Cancel call forwardarding
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CancelForwardWithHttpInfo ();
        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// Deletes all parties from the specified call and releases it.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Clear (string id, ClearData clearData);

        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// Deletes all parties from the specified call and releases it.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ClearWithHttpInfo (string id, ClearData clearData);
        /// <summary>
        /// Complete a call
        /// </summary>
        /// <remarks>
        /// Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteCall (string id, UserData1 userData);

        /// <summary>
        /// Complete a call
        /// </summary>
        /// <remarks>
        /// Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteCallWithHttpInfo (string id, UserData1 userData);
        /// <summary>
        /// Complete a conference
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteConference (string id, CompleteConferenceData completeConferenceData);

        /// <summary>
        /// Complete a conference
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteConferenceWithHttpInfo (string id, CompleteConferenceData completeConferenceData);
        /// <summary>
        /// Complete a transfer
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated two-step transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse CompleteTransfer (string id, CompleteTransferData completeTransferData);

        /// <summary>
        /// Complete a transfer
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated two-step transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> CompleteTransferWithHttpInfo (string id, CompleteTransferData completeTransferData);
        /// <summary>
        /// Delete a party from a conference call
        /// </summary>
        /// <remarks>
        /// Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteFromConference (string id, DeleteFromConferenceData deleteFromConferenceData);

        /// <summary>
        /// Delete a party from a conference call
        /// </summary>
        /// <remarks>
        /// Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteFromConferenceWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData);
        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the call data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteUserDataPair (string id, KeyData keyData);

        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the call data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteUserDataPairWithHttpInfo (string id, KeyData keyData);
        /// <summary>
        /// Fordward calls
        /// </summary>
        /// <remarks>
        /// Turn on call forwarding to the specified destination. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Forward (ForwardData forwardData);

        /// <summary>
        /// Fordward calls
        /// </summary>
        /// <remarks>
        /// Turn on call forwarding to the specified destination. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ForwardWithHttpInfo (ForwardData forwardData);
        /// <summary>
        /// Get all the calls
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 GetCalls ();

        /// <summary>
        /// Get all the calls
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> GetCallsWithHttpInfo ();
        /// <summary>
        /// Place a call on hold
        /// </summary>
        /// <remarks>
        /// Place the call specified by the id path parameter on hold.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Hold (string id, HoldData holdData = null);

        /// <summary>
        /// Place a call on hold
        /// </summary>
        /// <remarks>
        /// Place the call specified by the id path parameter on hold.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> HoldWithHttpInfo (string id, HoldData holdData = null);
        /// <summary>
        /// Initiate a conference
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse InitiateConference (string id, InitiateConferenceData initiateConferenceData);

        /// <summary>
        /// Initiate a conference
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> InitiateConferenceWithHttpInfo (string id, InitiateConferenceData initiateConferenceData);
        /// <summary>
        /// Initiate a transfer
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse InitiateTransfer (string id, InitiateTransferData initiateTransferData);

        /// <summary>
        /// Initiate a transfer
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> InitiateTransferWithHttpInfo (string id, InitiateTransferData initiateTransferData);
        /// <summary>
        /// Login the media voice
        /// </summary>
        /// <remarks>
        /// Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LoginVoice ();

        /// <summary>
        /// Login the media voice
        /// </summary>
        /// <remarks>
        /// Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LoginVoiceWithHttpInfo ();
        /// <summary>
        /// Logout the media voice
        /// </summary>
        /// <remarks>
        /// Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LogoutVoice ();

        /// <summary>
        /// Logout the media voice
        /// </summary>
        /// <remarks>
        /// Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutVoiceWithHttpInfo ();
        /// <summary>
        /// Make a new call to the specified destination
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MakeCall (MakeCallData makeCallData);

        /// <summary>
        /// Make a new call to the specified destination
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MakeCallWithHttpInfo (MakeCallData makeCallData);
        /// <summary>
        /// Merge two calls
        /// </summary>
        /// <remarks>
        /// Merge two calls 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Merge (string id, MergeData mergeData);

        /// <summary>
        /// Merge two calls
        /// </summary>
        /// <remarks>
        /// Merge two calls 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MergeWithHttpInfo (string id, MergeData mergeData);
        /// <summary>
        /// Pauses call recording.
        /// </summary>
        /// <remarks>
        /// Pauses call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse PauseRecording (string id);

        /// <summary>
        /// Pauses call recording.
        /// </summary>
        /// <remarks>
        /// Pauses call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> PauseRecordingWithHttpInfo (string id);
        /// <summary>
        /// Reconnect a call
        /// </summary>
        /// <remarks>
        /// Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Reconnect (string id, ReconnectData reconnectData);

        /// <summary>
        /// Reconnect a call
        /// </summary>
        /// <remarks>
        /// Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReconnectWithHttpInfo (string id, ReconnectData reconnectData);
        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Redirect (string id, RedirectData redirectData);

        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RedirectWithHttpInfo (string id, RedirectData redirectData);
        /// <summary>
        /// Release a call
        /// </summary>
        /// <remarks>
        /// Release the call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Release (string id, ReleaseData releaseData = null);

        /// <summary>
        /// Release a call
        /// </summary>
        /// <remarks>
        /// Release the call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReleaseWithHttpInfo (string id, ReleaseData releaseData = null);
        /// <summary>
        /// Resumes call recording.
        /// </summary>
        /// <remarks>
        /// Resumes call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ResumeRecording (string id);

        /// <summary>
        /// Resumes call recording.
        /// </summary>
        /// <remarks>
        /// Resumes call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ResumeRecordingWithHttpInfo (string id);
        /// <summary>
        /// Retrieve a held call
        /// </summary>
        /// <remarks>
        /// Retrieve the held call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Retrieve (string id, RetrieveData retrieveData = null);

        /// <summary>
        /// Retrieve a held call
        /// </summary>
        /// <remarks>
        /// Retrieve the held call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RetrieveWithHttpInfo (string id, RetrieveData retrieveData = null);
        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SendDTMF (string id, SendDTMFData sendDTMFData);

        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SendDTMFWithHttpInfo (string id, SendDTMFData sendDTMFData);
        /// <summary>
        /// Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <remarks>
        /// Send a userEvent event to TServer with provided attached data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SendUserEvent (SendUserEventData userEventData);

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <remarks>
        /// Send a userEvent event to TServer with provided attached data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SendUserEventWithHttpInfo (SendUserEventData userEventData);
        /// <summary>
        /// Change to the not ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetAgentStateNotReady (NotReadyData notReadyData = null);

        /// <summary>
        /// Change to the not ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetAgentStateNotReadyWithHttpInfo (NotReadyData notReadyData = null);
        /// <summary>
        /// Change to the ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetAgentStateReady (ReadyData readyData = null);

        /// <summary>
        /// Change to the ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetAgentStateReadyWithHttpInfo (ReadyData readyData = null);
        /// <summary>
        /// Turn off do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetDNDOff ();

        /// <summary>
        /// Turn off do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetDNDOffWithHttpInfo ();
        /// <summary>
        /// Turn on do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SetDNDOn ();

        /// <summary>
        /// Turn on do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SetDNDOnWithHttpInfo ();
        /// <summary>
        /// Create a conference in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step conference, adding the specified participant to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SingleStepConference (string id, SingleStepConferenceData singleStepConferenceData);

        /// <summary>
        /// Create a conference in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step conference, adding the specified participant to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SingleStepConferenceWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData);
        /// <summary>
        /// Transfer a call in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SingleStepTransfer (string id, SingleStepTransferData singleStepTransferData);

        /// <summary>
        /// Transfer a call in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SingleStepTransferWithHttpInfo (string id, SingleStepTransferData singleStepTransferData);
        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StartMonitoring (StartMonitoringData startMonitoringData);

        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StartMonitoringWithHttpInfo (StartMonitoringData startMonitoringData);
        /// <summary>
        /// Starts call recording.
        /// </summary>
        /// <remarks>
        /// Starts call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StartRecording (string id);

        /// <summary>
        /// Starts call recording.
        /// </summary>
        /// <remarks>
        /// Starts call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StartRecordingWithHttpInfo (string id);
        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StopMonitoring (StopMonitoringData stopMonitoringData);

        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StopMonitoringWithHttpInfo (StopMonitoringData stopMonitoringData);
        /// <summary>
        /// Stops call recording.
        /// </summary>
        /// <remarks>
        /// Stops call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse StopRecording (string id);

        /// <summary>
        /// Stops call recording.
        /// </summary>
        /// <remarks>
        /// Stops call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> StopRecordingWithHttpInfo (string id);
        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToBargeIn (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToBargeInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToCoaching (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToCoachingWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse SwitchToListenIn (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> SwitchToListenInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Update user data to a call
        /// </summary>
        /// <remarks>
        /// Update the call userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse UpdateUserData (string id, UserData userData);

        /// <summary>
        /// Update user data to a call
        /// </summary>
        /// <remarks>
        /// Update the call userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> UpdateUserDataWithHttpInfo (string id, UserData userData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Alternate between calls
        /// </summary>
        /// <remarks>
        /// Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AlternateAsync (string id, AlternateData alternateData);

        /// <summary>
        /// Alternate between calls
        /// </summary>
        /// <remarks>
        /// Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AlternateAsyncWithHttpInfo (string id, AlternateData alternateData);
        /// <summary>
        /// Answer a call
        /// </summary>
        /// <remarks>
        /// Answer the call specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AnswerAsync (string id, AnswerData answerData = null);

        /// <summary>
        /// Answer a call
        /// </summary>
        /// <remarks>
        /// Answer the call specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AnswerAsyncWithHttpInfo (string id, AnswerData answerData = null);
        /// <summary>
        /// Attach user data to a call
        /// </summary>
        /// <remarks>
        /// Attach the provided key/value pairs to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AttachUserDataAsync (string id, UserData userData);

        /// <summary>
        /// Attach user data to a call
        /// </summary>
        /// <remarks>
        /// Attach the provided key/value pairs to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachUserDataAsyncWithHttpInfo (string id, UserData userData);
        /// <summary>
        /// Cancel call forwardarding
        /// </summary>
        /// <remarks>
        /// Cancel call forwardarding
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CancelForwardAsync ();

        /// <summary>
        /// Cancel call forwardarding
        /// </summary>
        /// <remarks>
        /// Cancel call forwardarding
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelForwardAsyncWithHttpInfo ();
        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// Deletes all parties from the specified call and releases it.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ClearAsync (string id, ClearData clearData);

        /// <summary>
        /// Clear all the parties in the call.
        /// </summary>
        /// <remarks>
        /// Deletes all parties from the specified call and releases it.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ClearAsyncWithHttpInfo (string id, ClearData clearData);
        /// <summary>
        /// Complete a call
        /// </summary>
        /// <remarks>
        /// Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteCallAsync (string id, UserData1 userData);

        /// <summary>
        /// Complete a call
        /// </summary>
        /// <remarks>
        /// Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteCallAsyncWithHttpInfo (string id, UserData1 userData);
        /// <summary>
        /// Complete a conference
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteConferenceAsync (string id, CompleteConferenceData completeConferenceData);

        /// <summary>
        /// Complete a conference
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteConferenceAsyncWithHttpInfo (string id, CompleteConferenceData completeConferenceData);
        /// <summary>
        /// Complete a transfer
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated two-step transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> CompleteTransferAsync (string id, CompleteTransferData completeTransferData);

        /// <summary>
        /// Complete a transfer
        /// </summary>
        /// <remarks>
        /// Completes a previously initiated two-step transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteTransferAsyncWithHttpInfo (string id, CompleteTransferData completeTransferData);
        /// <summary>
        /// Delete a party from a conference call
        /// </summary>
        /// <remarks>
        /// Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteFromConferenceAsync (string id, DeleteFromConferenceData deleteFromConferenceData);

        /// <summary>
        /// Delete a party from a conference call
        /// </summary>
        /// <remarks>
        /// Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteFromConferenceAsyncWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData);
        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the call data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataPairAsync (string id, KeyData keyData);

        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the call data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataPairAsyncWithHttpInfo (string id, KeyData keyData);
        /// <summary>
        /// Fordward calls
        /// </summary>
        /// <remarks>
        /// Turn on call forwarding to the specified destination. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ForwardAsync (ForwardData forwardData);

        /// <summary>
        /// Fordward calls
        /// </summary>
        /// <remarks>
        /// Turn on call forwarding to the specified destination. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardAsyncWithHttpInfo (ForwardData forwardData);
        /// <summary>
        /// Get all the calls
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> GetCallsAsync ();

        /// <summary>
        /// Get all the calls
        /// </summary>
        /// <remarks>
        /// Returns an array containing any active calls for the user.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCallsAsyncWithHttpInfo ();
        /// <summary>
        /// Place a call on hold
        /// </summary>
        /// <remarks>
        /// Place the call specified by the id path parameter on hold.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> HoldAsync (string id, HoldData holdData = null);

        /// <summary>
        /// Place a call on hold
        /// </summary>
        /// <remarks>
        /// Place the call specified by the id path parameter on hold.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> HoldAsyncWithHttpInfo (string id, HoldData holdData = null);
        /// <summary>
        /// Initiate a conference
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> InitiateConferenceAsync (string id, InitiateConferenceData initiateConferenceData);

        /// <summary>
        /// Initiate a conference
        /// </summary>
        /// <remarks>
        /// Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateConferenceAsyncWithHttpInfo (string id, InitiateConferenceData initiateConferenceData);
        /// <summary>
        /// Initiate a transfer
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> InitiateTransferAsync (string id, InitiateTransferData initiateTransferData);

        /// <summary>
        /// Initiate a transfer
        /// </summary>
        /// <remarks>
        /// Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateTransferAsyncWithHttpInfo (string id, InitiateTransferData initiateTransferData);
        /// <summary>
        /// Login the media voice
        /// </summary>
        /// <remarks>
        /// Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LoginVoiceAsync ();

        /// <summary>
        /// Login the media voice
        /// </summary>
        /// <remarks>
        /// Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginVoiceAsyncWithHttpInfo ();
        /// <summary>
        /// Logout the media voice
        /// </summary>
        /// <remarks>
        /// Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutVoiceAsync ();

        /// <summary>
        /// Logout the media voice
        /// </summary>
        /// <remarks>
        /// Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutVoiceAsyncWithHttpInfo ();
        /// <summary>
        /// Make a new call to the specified destination
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MakeCallAsync (MakeCallData makeCallData);

        /// <summary>
        /// Make a new call to the specified destination
        /// </summary>
        /// <remarks>
        /// Make a new call to the specified destination
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MakeCallAsyncWithHttpInfo (MakeCallData makeCallData);
        /// <summary>
        /// Merge two calls
        /// </summary>
        /// <remarks>
        /// Merge two calls 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MergeAsync (string id, MergeData mergeData);

        /// <summary>
        /// Merge two calls
        /// </summary>
        /// <remarks>
        /// Merge two calls 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MergeAsyncWithHttpInfo (string id, MergeData mergeData);
        /// <summary>
        /// Pauses call recording.
        /// </summary>
        /// <remarks>
        /// Pauses call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> PauseRecordingAsync (string id);

        /// <summary>
        /// Pauses call recording.
        /// </summary>
        /// <remarks>
        /// Pauses call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PauseRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Reconnect a call
        /// </summary>
        /// <remarks>
        /// Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReconnectAsync (string id, ReconnectData reconnectData);

        /// <summary>
        /// Reconnect a call
        /// </summary>
        /// <remarks>
        /// Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReconnectAsyncWithHttpInfo (string id, ReconnectData reconnectData);
        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RedirectAsync (string id, RedirectData redirectData);

        /// <summary>
        /// Redirect the call.
        /// </summary>
        /// <remarks>
        /// Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RedirectAsyncWithHttpInfo (string id, RedirectData redirectData);
        /// <summary>
        /// Release a call
        /// </summary>
        /// <remarks>
        /// Release the call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseAsync (string id, ReleaseData releaseData = null);

        /// <summary>
        /// Release a call
        /// </summary>
        /// <remarks>
        /// Release the call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseAsyncWithHttpInfo (string id, ReleaseData releaseData = null);
        /// <summary>
        /// Resumes call recording.
        /// </summary>
        /// <remarks>
        /// Resumes call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ResumeRecordingAsync (string id);

        /// <summary>
        /// Resumes call recording.
        /// </summary>
        /// <remarks>
        /// Resumes call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ResumeRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Retrieve a held call
        /// </summary>
        /// <remarks>
        /// Retrieve the held call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RetrieveAsync (string id, RetrieveData retrieveData = null);

        /// <summary>
        /// Retrieve a held call
        /// </summary>
        /// <remarks>
        /// Retrieve the held call specified by the id path parameter.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RetrieveAsyncWithHttpInfo (string id, RetrieveData retrieveData = null);
        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SendDTMFAsync (string id, SendDTMFData sendDTMFData);

        /// <summary>
        /// Send digits as DTMF.
        /// </summary>
        /// <remarks>
        /// Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendDTMFAsyncWithHttpInfo (string id, SendDTMFData sendDTMFData);
        /// <summary>
        /// Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <remarks>
        /// Send a userEvent event to TServer with provided attached data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SendUserEventAsync (SendUserEventData userEventData);

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <remarks>
        /// Send a userEvent event to TServer with provided attached data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendUserEventAsyncWithHttpInfo (SendUserEventData userEventData);
        /// <summary>
        /// Change to the not ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateNotReadyAsync (NotReadyData notReadyData = null);

        /// <summary>
        /// Change to the not ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateNotReadyAsyncWithHttpInfo (NotReadyData notReadyData = null);
        /// <summary>
        /// Change to the ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateReadyAsync (ReadyData readyData = null);

        /// <summary>
        /// Change to the ready state for voice
        /// </summary>
        /// <remarks>
        /// Change to the ready state for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateReadyAsyncWithHttpInfo (ReadyData readyData = null);
        /// <summary>
        /// Turn off do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOffAsync ();

        /// <summary>
        /// Turn off do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOffAsyncWithHttpInfo ();
        /// <summary>
        /// Turn on do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOnAsync ();

        /// <summary>
        /// Turn on do not disturb for voice
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for voice
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOnAsyncWithHttpInfo ();
        /// <summary>
        /// Create a conference in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step conference, adding the specified participant to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepConferenceAsync (string id, SingleStepConferenceData singleStepConferenceData);

        /// <summary>
        /// Create a conference in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step conference, adding the specified participant to the call.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepConferenceAsyncWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData);
        /// <summary>
        /// Transfer a call in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepTransferAsync (string id, SingleStepTransferData singleStepTransferData);

        /// <summary>
        /// Transfer a call in a single step
        /// </summary>
        /// <remarks>
        /// Performs a single-step transfer to the specified destination.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepTransferAsyncWithHttpInfo (string id, SingleStepTransferData singleStepTransferData);
        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (StartMonitoringData startMonitoringData);

        /// <summary>
        /// Start the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (StartMonitoringData startMonitoringData);
        /// <summary>
        /// Starts call recording.
        /// </summary>
        /// <remarks>
        /// Starts call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StartRecordingAsync (string id);

        /// <summary>
        /// Starts call recording.
        /// </summary>
        /// <remarks>
        /// Starts call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (StopMonitoringData stopMonitoringData);

        /// <summary>
        /// Stop the monitoring of an agent.
        /// </summary>
        /// <remarks>
        /// Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (StopMonitoringData stopMonitoringData);
        /// <summary>
        /// Stops call recording.
        /// </summary>
        /// <remarks>
        /// Stops call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> StopRecordingAsync (string id);

        /// <summary>
        /// Stops call recording.
        /// </summary>
        /// <remarks>
        /// Stops call recording.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopRecordingAsyncWithHttpInfo (string id);
        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to barge in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to barge in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to coaching monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to coaching mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, MonitoringScopeData monitoringScopeData = null);

        /// <summary>
        /// Switch to listen in monitoring mode.
        /// </summary>
        /// <remarks>
        /// Switch the currently monitored voice interaction to listen in mode
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null);
        /// <summary>
        /// Update user data to a call
        /// </summary>
        /// <remarks>
        /// Update the call userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserDataAsync (string id, UserData userData);

        /// <summary>
        /// Update user data to a call
        /// </summary>
        /// <remarks>
        /// Update the call userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserDataAsyncWithHttpInfo (string id, UserData userData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class VoiceApi : IVoiceApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VoiceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VoiceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Alternate between calls Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Alternate (string id, AlternateData alternateData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AlternateWithHttpInfo(id, alternateData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Alternate between calls Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AlternateWithHttpInfo (string id, AlternateData alternateData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Alternate");
            // verify the required parameter 'alternateData' is set
            if (alternateData == null)
                throw new ApiException(400, "Missing required parameter 'alternateData' when calling VoiceApi->Alternate");

            var localVarPath = "/voice/calls/{id}/alternate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alternateData != null && alternateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alternateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alternateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Alternate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Alternate between calls Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AlternateAsync (string id, AlternateData alternateData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AlternateAsyncWithHttpInfo(id, alternateData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Alternate between calls Alternate between two calls when one call is held and the other is established. This is a quick way to put a call on hold and retrieve another held call in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the active call that should be placed on hold</param>
        /// <param name="alternateData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AlternateAsyncWithHttpInfo (string id, AlternateData alternateData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Alternate");
            // verify the required parameter 'alternateData' is set
            if (alternateData == null)
                throw new ApiException(400, "Missing required parameter 'alternateData' when calling VoiceApi->Alternate");

            var localVarPath = "/voice/calls/{id}/alternate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (alternateData != null && alternateData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alternateData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alternateData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Alternate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Answer a call Answer the call specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Answer (string id, AnswerData answerData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AnswerWithHttpInfo(id, answerData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Answer a call Answer the call specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AnswerWithHttpInfo (string id, AnswerData answerData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Answer");

            var localVarPath = "/voice/calls/{id}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answerData != null && answerData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answerData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Answer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Answer a call Answer the call specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AnswerAsync (string id, AnswerData answerData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AnswerAsyncWithHttpInfo(id, answerData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Answer a call Answer the call specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to answer</param>
        /// <param name="answerData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AnswerAsyncWithHttpInfo (string id, AnswerData answerData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Answer");

            var localVarPath = "/voice/calls/{id}/answer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (answerData != null && answerData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(answerData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = answerData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Answer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to a call Attach the provided key/value pairs to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse AttachUserData (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AttachUserDataWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach user data to a call Attach the provided key/value pairs to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AttachUserDataWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->AttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->AttachUserData");

            var localVarPath = "/voice/calls/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to a call Attach the provided key/value pairs to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AttachUserDataAsync (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AttachUserDataAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach user data to a call Attach the provided key/value pairs to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs to attach.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AttachUserDataAsyncWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->AttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->AttachUserData");

            var localVarPath = "/voice/calls/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Cancel call forwardarding Cancel call forwardarding
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CancelForward ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CancelForwardWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel call forwardarding Cancel call forwardarding
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CancelForwardWithHttpInfo ()
        {

            var localVarPath = "/voice/cancel-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelForward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Cancel call forwardarding Cancel call forwardarding
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CancelForwardAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CancelForwardAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel call forwardarding Cancel call forwardarding
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CancelForwardAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/cancel-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelForward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Clear all the parties in the call. Deletes all parties from the specified call and releases it.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Clear (string id, ClearData clearData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ClearWithHttpInfo(id, clearData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Clear all the parties in the call. Deletes all parties from the specified call and releases it.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ClearWithHttpInfo (string id, ClearData clearData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Clear");
            // verify the required parameter 'clearData' is set
            if (clearData == null)
                throw new ApiException(400, "Missing required parameter 'clearData' when calling VoiceApi->Clear");

            var localVarPath = "/voice/calls/{id}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearData != null && clearData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clearData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Clear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Clear all the parties in the call. Deletes all parties from the specified call and releases it.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ClearAsync (string id, ClearData clearData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ClearAsyncWithHttpInfo(id, clearData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Clear all the parties in the call. Deletes all parties from the specified call and releases it.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to be cleared</param>
        /// <param name="clearData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ClearAsyncWithHttpInfo (string id, ClearData clearData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Clear");
            // verify the required parameter 'clearData' is set
            if (clearData == null)
                throw new ApiException(400, "Missing required parameter 'clearData' when calling VoiceApi->Clear");

            var localVarPath = "/voice/calls/{id}/clear";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clearData != null && clearData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(clearData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = clearData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Clear", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a call Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteCall (string id, UserData1 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteCallWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a call Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteCallWithHttpInfo (string id, UserData1 userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteCall");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->CompleteCall");

            var localVarPath = "/voice/calls/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a call Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteCallAsync (string id, UserData1 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteCallAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete a call Complete and clean up the telephony object specified by the parameter conn_id. The userData parameter is sent throught the DistributeUserEvent operation.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteCallAsyncWithHttpInfo (string id, UserData1 userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteCall");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->CompleteCall");

            var localVarPath = "/voice/calls/{id}/complete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a conference Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteConference (string id, CompleteConferenceData completeConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteConferenceWithHttpInfo(id, completeConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a conference Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteConferenceWithHttpInfo (string id, CompleteConferenceData completeConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteConference");
            // verify the required parameter 'completeConferenceData' is set
            if (completeConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'completeConferenceData' when calling VoiceApi->CompleteConference");

            var localVarPath = "/voice/calls/{id}/complete-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeConferenceData != null && completeConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a conference Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteConferenceAsync (string id, CompleteConferenceData completeConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteConferenceAsyncWithHttpInfo(id, completeConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete a conference Completes a previously initiated conference. Once completed, the two separate calls  are brought together so that all three parties are participating in the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteConferenceAsyncWithHttpInfo (string id, CompleteConferenceData completeConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteConference");
            // verify the required parameter 'completeConferenceData' is set
            if (completeConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'completeConferenceData' when calling VoiceApi->CompleteConference");

            var localVarPath = "/voice/calls/{id}/complete-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeConferenceData != null && completeConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a transfer Completes a previously initiated two-step transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse CompleteTransfer (string id, CompleteTransferData completeTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = CompleteTransferWithHttpInfo(id, completeTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Complete a transfer Completes a previously initiated two-step transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > CompleteTransferWithHttpInfo (string id, CompleteTransferData completeTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteTransfer");
            // verify the required parameter 'completeTransferData' is set
            if (completeTransferData == null)
                throw new ApiException(400, "Missing required parameter 'completeTransferData' when calling VoiceApi->CompleteTransfer");

            var localVarPath = "/voice/calls/{id}/complete-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeTransferData != null && completeTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Complete a transfer Completes a previously initiated two-step transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> CompleteTransferAsync (string id, CompleteTransferData completeTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await CompleteTransferAsyncWithHttpInfo(id, completeTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Complete a transfer Completes a previously initiated two-step transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the active call</param>
        /// <param name="completeTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> CompleteTransferAsyncWithHttpInfo (string id, CompleteTransferData completeTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->CompleteTransfer");
            // verify the required parameter 'completeTransferData' is set
            if (completeTransferData == null)
                throw new ApiException(400, "Missing required parameter 'completeTransferData' when calling VoiceApi->CompleteTransfer");

            var localVarPath = "/voice/calls/{id}/complete-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (completeTransferData != null && completeTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(completeTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = completeTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CompleteTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Delete a party from a conference call Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteFromConference (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteFromConferenceWithHttpInfo(id, deleteFromConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a party from a conference call Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteFromConferenceWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteFromConference");
            // verify the required parameter 'deleteFromConferenceData' is set
            if (deleteFromConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'deleteFromConferenceData' when calling VoiceApi->DeleteFromConference");

            var localVarPath = "/voice/calls/{id}/delete-from-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteFromConferenceData != null && deleteFromConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteFromConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteFromConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFromConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Delete a party from a conference call Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteFromConferenceAsync (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteFromConferenceAsyncWithHttpInfo(id, deleteFromConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a party from a conference call Removes the specified participant from the conference call. This operation can only be performed  by the owner of the conference call
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the conference call</param>
        /// <param name="deleteFromConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteFromConferenceAsyncWithHttpInfo (string id, DeleteFromConferenceData deleteFromConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteFromConference");
            // verify the required parameter 'deleteFromConferenceData' is set
            if (deleteFromConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'deleteFromConferenceData' when calling VoiceApi->DeleteFromConference");

            var localVarPath = "/voice/calls/{id}/delete-from-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (deleteFromConferenceData != null && deleteFromConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deleteFromConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deleteFromConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteFromConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the call data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteUserDataPair (string id, KeyData keyData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteUserDataPairWithHttpInfo(id, keyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the call data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteUserDataPairWithHttpInfo (string id, KeyData keyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteUserDataPair");
            // verify the required parameter 'keyData' is set
            if (keyData == null)
                throw new ApiException(400, "Missing required parameter 'keyData' when calling VoiceApi->DeleteUserDataPair");

            var localVarPath = "/voice/calls/{id}/delete-user-data-pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keyData != null && keyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(keyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserDataPair", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the call data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataPairAsync (string id, KeyData keyData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteUserDataPairAsyncWithHttpInfo(id, keyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the call data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="keyData">The key of the key/value pairs to delete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataPairAsyncWithHttpInfo (string id, KeyData keyData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->DeleteUserDataPair");
            // verify the required parameter 'keyData' is set
            if (keyData == null)
                throw new ApiException(400, "Missing required parameter 'keyData' when calling VoiceApi->DeleteUserDataPair");

            var localVarPath = "/voice/calls/{id}/delete-user-data-pair";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (keyData != null && keyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(keyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = keyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserDataPair", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Fordward calls Turn on call forwarding to the specified destination. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Forward (ForwardData forwardData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ForwardWithHttpInfo(forwardData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fordward calls Turn on call forwarding to the specified destination. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ForwardWithHttpInfo (ForwardData forwardData)
        {
            // verify the required parameter 'forwardData' is set
            if (forwardData == null)
                throw new ApiException(400, "Missing required parameter 'forwardData' when calling VoiceApi->Forward");

            var localVarPath = "/voice/set-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Forward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Fordward calls Turn on call forwarding to the specified destination. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ForwardAsync (ForwardData forwardData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ForwardAsyncWithHttpInfo(forwardData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fordward calls Turn on call forwarding to the specified destination. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="forwardData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ForwardAsyncWithHttpInfo (ForwardData forwardData)
        {
            // verify the required parameter 'forwardData' is set
            if (forwardData == null)
                throw new ApiException(400, "Missing required parameter 'forwardData' when calling VoiceApi->Forward");

            var localVarPath = "/voice/set-forward";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (forwardData != null && forwardData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(forwardData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = forwardData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Forward", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Get all the calls Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 GetCalls ()
        {
             ApiResponse<InlineResponse200> localVarResponse = GetCallsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all the calls Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > GetCallsWithHttpInfo ()
        {

            var localVarPath = "/voice/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get all the calls Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> GetCallsAsync ()
        {
             ApiResponse<InlineResponse200> localVarResponse = await GetCallsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all the calls Returns an array containing any active calls for the user.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> GetCallsAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCalls", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Place a call on hold Place the call specified by the id path parameter on hold.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Hold (string id, HoldData holdData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = HoldWithHttpInfo(id, holdData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place a call on hold Place the call specified by the id path parameter on hold.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > HoldWithHttpInfo (string id, HoldData holdData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Hold");

            var localVarPath = "/voice/calls/{id}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (holdData != null && holdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(holdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = holdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Hold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place a call on hold Place the call specified by the id path parameter on hold.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> HoldAsync (string id, HoldData holdData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await HoldAsyncWithHttpInfo(id, holdData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place a call on hold Place the call specified by the id path parameter on hold.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="holdData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> HoldAsyncWithHttpInfo (string id, HoldData holdData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Hold");

            var localVarPath = "/voice/calls/{id}/hold";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (holdData != null && holdData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(holdData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = holdData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Hold", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a conference Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse InitiateConference (string id, InitiateConferenceData initiateConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = InitiateConferenceWithHttpInfo(id, initiateConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a conference Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > InitiateConferenceWithHttpInfo (string id, InitiateConferenceData initiateConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateConference");
            // verify the required parameter 'initiateConferenceData' is set
            if (initiateConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'initiateConferenceData' when calling VoiceApi->InitiateConference");

            var localVarPath = "/voice/calls/{id}/initiate-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateConferenceData != null && initiateConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a conference Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> InitiateConferenceAsync (string id, InitiateConferenceData initiateConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await InitiateConferenceAsyncWithHttpInfo(id, initiateConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a conference Initiates a two-step conference to the specified destination. This operation places the existing call on hold  and creates a new call in the dialing state. After initiating the conference you can use /complete-conference  to complete the conference and bring all parties into the same call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call to initiate the conference from. This call will be placed on hold.</param>
        /// <param name="initiateConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateConferenceAsyncWithHttpInfo (string id, InitiateConferenceData initiateConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateConference");
            // verify the required parameter 'initiateConferenceData' is set
            if (initiateConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'initiateConferenceData' when calling VoiceApi->InitiateConference");

            var localVarPath = "/voice/calls/{id}/initiate-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateConferenceData != null && initiateConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a transfer Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse InitiateTransfer (string id, InitiateTransferData initiateTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = InitiateTransferWithHttpInfo(id, initiateTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initiate a transfer Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > InitiateTransferWithHttpInfo (string id, InitiateTransferData initiateTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateTransfer");
            // verify the required parameter 'initiateTransferData' is set
            if (initiateTransferData == null)
                throw new ApiException(400, "Missing required parameter 'initiateTransferData' when calling VoiceApi->InitiateTransfer");

            var localVarPath = "/voice/calls/{id}/initiate-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateTransferData != null && initiateTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Initiate a transfer Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> InitiateTransferAsync (string id, InitiateTransferData initiateTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await InitiateTransferAsyncWithHttpInfo(id, initiateTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initiate a transfer Initiates a two-step transfer to the specified destination. After initiating the transfer,  you can use complete-transfer to complete the transfer.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be placed on hold.</param>
        /// <param name="initiateTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> InitiateTransferAsyncWithHttpInfo (string id, InitiateTransferData initiateTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->InitiateTransfer");
            // verify the required parameter 'initiateTransferData' is set
            if (initiateTransferData == null)
                throw new ApiException(400, "Missing required parameter 'initiateTransferData' when calling VoiceApi->InitiateTransfer");

            var localVarPath = "/voice/calls/{id}/initiate-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (initiateTransferData != null && initiateTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(initiateTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = initiateTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InitiateTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Login the media voice Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LoginVoice ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LoginVoiceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Login the media voice Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LoginVoiceWithHttpInfo ()
        {

            var localVarPath = "/voice/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Login the media voice Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LoginVoiceAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LoginVoiceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Login the media voice Login on the voice channel. This can be used to login the voice channel if it is logged out. (ex. after using /voice/logout). Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LoginVoiceAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LoginVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout the media voice Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LogoutVoice ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutVoiceWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout the media voice Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutVoiceWithHttpInfo ()
        {

            var localVarPath = "/voice/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout the media voice Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutVoiceAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutVoiceAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout the media voice Logout on the voice channel. Together voice/logout and voice/login allow the agent to logout of the voice channel temporarily without having to logout the entire session. 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutVoiceAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutVoice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Make a new call to the specified destination Make a new call to the specified destination
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MakeCall (MakeCallData makeCallData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MakeCallWithHttpInfo(makeCallData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Make a new call to the specified destination Make a new call to the specified destination
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MakeCallWithHttpInfo (MakeCallData makeCallData)
        {
            // verify the required parameter 'makeCallData' is set
            if (makeCallData == null)
                throw new ApiException(400, "Missing required parameter 'makeCallData' when calling VoiceApi->MakeCall");

            var localVarPath = "/voice/make-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (makeCallData != null && makeCallData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(makeCallData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MakeCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Make a new call to the specified destination Make a new call to the specified destination
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MakeCallAsync (MakeCallData makeCallData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MakeCallAsyncWithHttpInfo(makeCallData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Make a new call to the specified destination Make a new call to the specified destination
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="makeCallData">Request parameters.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MakeCallAsyncWithHttpInfo (MakeCallData makeCallData)
        {
            // verify the required parameter 'makeCallData' is set
            if (makeCallData == null)
                throw new ApiException(400, "Missing required parameter 'makeCallData' when calling VoiceApi->MakeCall");

            var localVarPath = "/voice/make-call";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (makeCallData != null && makeCallData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(makeCallData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = makeCallData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MakeCall", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Merge two calls Merge two calls 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Merge (string id, MergeData mergeData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MergeWithHttpInfo(id, mergeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Merge two calls Merge two calls 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MergeWithHttpInfo (string id, MergeData mergeData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Merge");
            // verify the required parameter 'mergeData' is set
            if (mergeData == null)
                throw new ApiException(400, "Missing required parameter 'mergeData' when calling VoiceApi->Merge");

            var localVarPath = "/voice/calls/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mergeData != null && mergeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Merge two calls Merge two calls 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MergeAsync (string id, MergeData mergeData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MergeAsyncWithHttpInfo(id, mergeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Merge two calls Merge two calls 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the first call to be merged</param>
        /// <param name="mergeData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MergeAsyncWithHttpInfo (string id, MergeData mergeData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Merge");
            // verify the required parameter 'mergeData' is set
            if (mergeData == null)
                throw new ApiException(400, "Missing required parameter 'mergeData' when calling VoiceApi->Merge");

            var localVarPath = "/voice/calls/{id}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (mergeData != null && mergeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Merge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pauses call recording. Pauses call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse PauseRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = PauseRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pauses call recording. Pauses call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > PauseRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->PauseRecording");

            var localVarPath = "/voice/calls/{id}/pause-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Pauses call recording. Pauses call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> PauseRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await PauseRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pauses call recording. Pauses call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PauseRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->PauseRecording");

            var localVarPath = "/voice/calls/{id}/pause-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PauseRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reconnect a call Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Reconnect (string id, ReconnectData reconnectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReconnectWithHttpInfo(id, reconnectData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reconnect a call Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReconnectWithHttpInfo (string id, ReconnectData reconnectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Reconnect");
            // verify the required parameter 'reconnectData' is set
            if (reconnectData == null)
                throw new ApiException(400, "Missing required parameter 'reconnectData' when calling VoiceApi->Reconnect");

            var localVarPath = "/voice/calls/{id}/reconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reconnectData != null && reconnectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reconnectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reconnectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reconnect a call Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReconnectAsync (string id, ReconnectData reconnectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReconnectAsyncWithHttpInfo(id, reconnectData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reconnect a call Release the active call and retrieve another call from hold. This is a quick way to to do  /release and /retrieve in one step.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the active call</param>
        /// <param name="reconnectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReconnectAsyncWithHttpInfo (string id, ReconnectData reconnectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Reconnect");
            // verify the required parameter 'reconnectData' is set
            if (reconnectData == null)
                throw new ApiException(400, "Missing required parameter 'reconnectData' when calling VoiceApi->Reconnect");

            var localVarPath = "/voice/calls/{id}/reconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (reconnectData != null && reconnectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reconnectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reconnectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Redirect the call. Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Redirect (string id, RedirectData redirectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RedirectWithHttpInfo(id, redirectData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Redirect the call. Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RedirectWithHttpInfo (string id, RedirectData redirectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Redirect");
            // verify the required parameter 'redirectData' is set
            if (redirectData == null)
                throw new ApiException(400, "Missing required parameter 'redirectData' when calling VoiceApi->Redirect");

            var localVarPath = "/voice/calls/{id}/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (redirectData != null && redirectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(redirectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = redirectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Redirect the call. Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RedirectAsync (string id, RedirectData redirectData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RedirectAsyncWithHttpInfo(id, redirectData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Redirect the call. Requests that the call be redirected, without an answer, from the party specified by the parameter dn to the party specified by the parameter dest_dn.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection ID of the current call handled by the DN.</param>
        /// <param name="redirectData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RedirectAsyncWithHttpInfo (string id, RedirectData redirectData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Redirect");
            // verify the required parameter 'redirectData' is set
            if (redirectData == null)
                throw new ApiException(400, "Missing required parameter 'redirectData' when calling VoiceApi->Redirect");

            var localVarPath = "/voice/calls/{id}/redirect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (redirectData != null && redirectData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(redirectData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = redirectData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Redirect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release a call Release the call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Release (string id, ReleaseData releaseData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReleaseWithHttpInfo(id, releaseData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Release a call Release the call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReleaseWithHttpInfo (string id, ReleaseData releaseData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Release");

            var localVarPath = "/voice/calls/{id}/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseData != null && releaseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Release", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Release a call Release the call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReleaseAsync (string id, ReleaseData releaseData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReleaseAsyncWithHttpInfo(id, releaseData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Release a call Release the call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="releaseData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReleaseAsyncWithHttpInfo (string id, ReleaseData releaseData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Release");

            var localVarPath = "/voice/calls/{id}/release";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (releaseData != null && releaseData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(releaseData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = releaseData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Release", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Resumes call recording. Resumes call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ResumeRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ResumeRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resumes call recording. Resumes call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ResumeRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->ResumeRecording");

            var localVarPath = "/voice/calls/{id}/resume-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Resumes call recording. Resumes call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ResumeRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ResumeRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resumes call recording. Resumes call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ResumeRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->ResumeRecording");

            var localVarPath = "/voice/calls/{id}/resume-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResumeRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Retrieve a held call Retrieve the held call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Retrieve (string id, RetrieveData retrieveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RetrieveWithHttpInfo(id, retrieveData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a held call Retrieve the held call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RetrieveWithHttpInfo (string id, RetrieveData retrieveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Retrieve");

            var localVarPath = "/voice/calls/{id}/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retrieveData != null && retrieveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(retrieveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retrieveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Retrieve a held call Retrieve the held call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RetrieveAsync (string id, RetrieveData retrieveData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RetrieveAsyncWithHttpInfo(id, retrieveData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve a held call Retrieve the held call specified by the id path parameter.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="retrieveData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RetrieveAsyncWithHttpInfo (string id, RetrieveData retrieveData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->Retrieve");

            var localVarPath = "/voice/calls/{id}/retrieve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (retrieveData != null && retrieveData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(retrieveData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = retrieveData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Retrieve", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send digits as DTMF. Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SendDTMF (string id, SendDTMFData sendDTMFData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SendDTMFWithHttpInfo(id, sendDTMFData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send digits as DTMF. Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SendDTMFWithHttpInfo (string id, SendDTMFData sendDTMFData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SendDTMF");
            // verify the required parameter 'sendDTMFData' is set
            if (sendDTMFData == null)
                throw new ApiException(400, "Missing required parameter 'sendDTMFData' when calling VoiceApi->SendDTMF");

            var localVarPath = "/voice/calls/{id}/send-dtmf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendDTMFData != null && sendDTMFData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendDTMFData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDTMFData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDTMF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send digits as DTMF. Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SendDTMFAsync (string id, SendDTMFData sendDTMFData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SendDTMFAsyncWithHttpInfo(id, sendDTMFData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send digits as DTMF. Sends the provided DTMF digits. You can send DTMF digits individually with multiple requests  or together with multiple digits in one request.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the cal</param>
        /// <param name="sendDTMFData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendDTMFAsyncWithHttpInfo (string id, SendDTMFData sendDTMFData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SendDTMF");
            // verify the required parameter 'sendDTMFData' is set
            if (sendDTMFData == null)
                throw new ApiException(400, "Missing required parameter 'sendDTMFData' when calling VoiceApi->SendDTMF");

            var localVarPath = "/voice/calls/{id}/send-dtmf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sendDTMFData != null && sendDTMFData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(sendDTMFData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendDTMFData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendDTMF", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data. Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SendUserEvent (SendUserEventData userEventData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SendUserEventWithHttpInfo(userEventData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data. Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SendUserEventWithHttpInfo (SendUserEventData userEventData)
        {
            // verify the required parameter 'userEventData' is set
            if (userEventData == null)
                throw new ApiException(400, "Missing required parameter 'userEventData' when calling VoiceApi->SendUserEvent");

            var localVarPath = "/voice/send-user-event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEventData != null && userEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendUserEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data. Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SendUserEventAsync (SendUserEventData userEventData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SendUserEventAsyncWithHttpInfo(userEventData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a userEvent event to TServer with provided attached data. Send a userEvent event to TServer with provided attached data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userEventData">Data defining the user event to be distributed</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SendUserEventAsyncWithHttpInfo (SendUserEventData userEventData)
        {
            // verify the required parameter 'userEventData' is set
            if (userEventData == null)
                throw new ApiException(400, "Missing required parameter 'userEventData' when calling VoiceApi->SendUserEvent");

            var localVarPath = "/voice/send-user-event";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userEventData != null && userEventData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userEventData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userEventData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendUserEvent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for voice Change to the not ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetAgentStateNotReady (NotReadyData notReadyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetAgentStateNotReadyWithHttpInfo(notReadyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the not ready state for voice Change to the not ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetAgentStateNotReadyWithHttpInfo (NotReadyData notReadyData = null)
        {

            var localVarPath = "/voice/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyData != null && notReadyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateNotReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for voice Change to the not ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateNotReadyAsync (NotReadyData notReadyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetAgentStateNotReadyAsyncWithHttpInfo(notReadyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the not ready state for voice Change to the not ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notReadyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateNotReadyAsyncWithHttpInfo (NotReadyData notReadyData = null)
        {

            var localVarPath = "/voice/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (notReadyData != null && notReadyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateNotReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for voice Change to the ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetAgentStateReady (ReadyData readyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetAgentStateReadyWithHttpInfo(readyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the ready state for voice Change to the ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetAgentStateReadyWithHttpInfo (ReadyData readyData = null)
        {

            var localVarPath = "/voice/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readyData != null && readyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for voice Change to the ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetAgentStateReadyAsync (ReadyData readyData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetAgentStateReadyAsyncWithHttpInfo(readyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the ready state for voice Change to the ready state for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="readyData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetAgentStateReadyAsyncWithHttpInfo (ReadyData readyData = null)
        {

            var localVarPath = "/voice/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (readyData != null && readyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetAgentStateReady", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off do not disturb for voice Turn off do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetDNDOff ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetDNDOffWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn off do not disturb for voice Turn off do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetDNDOffWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off do not disturb for voice Turn off do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOffAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetDNDOffAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn off do not disturb for voice Turn off do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOffAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn on do not disturb for voice Turn on do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SetDNDOn ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SetDNDOnWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn on do not disturb for voice Turn on do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SetDNDOnWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn on do not disturb for voice Turn on do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SetDNDOnAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SetDNDOnAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn on do not disturb for voice Turn on do not disturb for voice
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SetDNDOnAsyncWithHttpInfo ()
        {

            var localVarPath = "/voice/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SetDNDOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a conference in a single step Performs a single-step conference, adding the specified participant to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SingleStepConference (string id, SingleStepConferenceData singleStepConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SingleStepConferenceWithHttpInfo(id, singleStepConferenceData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a conference in a single step Performs a single-step conference, adding the specified participant to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SingleStepConferenceWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepConference");
            // verify the required parameter 'singleStepConferenceData' is set
            if (singleStepConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepConferenceData' when calling VoiceApi->SingleStepConference");

            var localVarPath = "/voice/calls/{id}/single-step-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepConferenceData != null && singleStepConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Create a conference in a single step Performs a single-step conference, adding the specified participant to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepConferenceAsync (string id, SingleStepConferenceData singleStepConferenceData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SingleStepConferenceAsyncWithHttpInfo(id, singleStepConferenceData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a conference in a single step Performs a single-step conference, adding the specified participant to the call.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call that is requested to be conferenced.</param>
        /// <param name="singleStepConferenceData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepConferenceAsyncWithHttpInfo (string id, SingleStepConferenceData singleStepConferenceData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepConference");
            // verify the required parameter 'singleStepConferenceData' is set
            if (singleStepConferenceData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepConferenceData' when calling VoiceApi->SingleStepConference");

            var localVarPath = "/voice/calls/{id}/single-step-conference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepConferenceData != null && singleStepConferenceData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepConferenceData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepConferenceData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepConference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer a call in a single step Performs a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SingleStepTransfer (string id, SingleStepTransferData singleStepTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SingleStepTransferWithHttpInfo(id, singleStepTransferData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer a call in a single step Performs a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SingleStepTransferWithHttpInfo (string id, SingleStepTransferData singleStepTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepTransfer");
            // verify the required parameter 'singleStepTransferData' is set
            if (singleStepTransferData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepTransferData' when calling VoiceApi->SingleStepTransfer");

            var localVarPath = "/voice/calls/{id}/single-step-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepTransferData != null && singleStepTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Transfer a call in a single step Performs a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SingleStepTransferAsync (string id, SingleStepTransferData singleStepTransferData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SingleStepTransferAsyncWithHttpInfo(id, singleStepTransferData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Transfer a call in a single step Performs a single-step transfer to the specified destination.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the call to be transferred.</param>
        /// <param name="singleStepTransferData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SingleStepTransferAsyncWithHttpInfo (string id, SingleStepTransferData singleStepTransferData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SingleStepTransfer");
            // verify the required parameter 'singleStepTransferData' is set
            if (singleStepTransferData == null)
                throw new ApiException(400, "Missing required parameter 'singleStepTransferData' when calling VoiceApi->SingleStepTransfer");

            var localVarPath = "/voice/calls/{id}/single-step-transfer";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (singleStepTransferData != null && singleStepTransferData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(singleStepTransferData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = singleStepTransferData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SingleStepTransfer", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StartMonitoring (StartMonitoringData startMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StartMonitoringWithHttpInfo(startMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StartMonitoringWithHttpInfo (StartMonitoringData startMonitoringData)
        {
            // verify the required parameter 'startMonitoringData' is set
            if (startMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'startMonitoringData' when calling VoiceApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startMonitoringData != null && startMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StartMonitoringAsync (StartMonitoringData startMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StartMonitoringAsyncWithHttpInfo(startMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start the monitoring of an agent. Start the monitoring of an agent, providing monitoring information (phone number to be monitored, monitoringMode (Mute/Coach/Connect), monitoringNextCallType (OneCall/AllCalls), monitoringScope (Agent/Call)).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartMonitoringAsyncWithHttpInfo (StartMonitoringData startMonitoringData)
        {
            // verify the required parameter 'startMonitoringData' is set
            if (startMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'startMonitoringData' when calling VoiceApi->StartMonitoring");

            var localVarPath = "/voice/start-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (startMonitoringData != null && startMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(startMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = startMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Starts call recording. Starts call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StartRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StartRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Starts call recording. Starts call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StartRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StartRecording");

            var localVarPath = "/voice/calls/{id}/start-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Starts call recording. Starts call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StartRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StartRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Starts call recording. Starts call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StartRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StartRecording");

            var localVarPath = "/voice/calls/{id}/start-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StopMonitoring (StopMonitoringData stopMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StopMonitoringWithHttpInfo(stopMonitoringData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StopMonitoringWithHttpInfo (StopMonitoringData stopMonitoringData)
        {
            // verify the required parameter 'stopMonitoringData' is set
            if (stopMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'stopMonitoringData' when calling VoiceApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopMonitoringData != null && stopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StopMonitoringAsync (StopMonitoringData stopMonitoringData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StopMonitoringAsyncWithHttpInfo(stopMonitoringData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop the monitoring of an agent. Stop the monitoring of an agent, providing monitoring information (phoneNumber to be monitored).
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stopMonitoringData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopMonitoringAsyncWithHttpInfo (StopMonitoringData stopMonitoringData)
        {
            // verify the required parameter 'stopMonitoringData' is set
            if (stopMonitoringData == null)
                throw new ApiException(400, "Missing required parameter 'stopMonitoringData' when calling VoiceApi->StopMonitoring");

            var localVarPath = "/voice/stop-monitoring";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (stopMonitoringData != null && stopMonitoringData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(stopMonitoringData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = stopMonitoringData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopMonitoring", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stops call recording. Stops call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse StopRecording (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = StopRecordingWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stops call recording. Stops call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > StopRecordingWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StopRecording");

            var localVarPath = "/voice/calls/{id}/stop-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Stops call recording. Stops call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> StopRecordingAsync (string id)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await StopRecordingAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stops call recording. Stops call recording.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> StopRecordingAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->StopRecording");

            var localVarPath = "/voice/calls/{id}/stop-recording";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopRecording", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToBargeIn (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToBargeInWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToBargeInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToBargeInAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToBargeInAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to barge in monitoring mode. Switch the currently monitored voice interaction to barge in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToBargeInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToBargeIn");

            var localVarPath = "/voice/calls/{id}/switch-to-barge-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToBargeIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToCoaching (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToCoachingWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToCoachingWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToCoachingAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToCoachingAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to coaching monitoring mode. Switch the currently monitored voice interaction to coaching mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToCoachingAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToCoaching");

            var localVarPath = "/voice/calls/{id}/switch-to-coaching";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToCoaching", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse SwitchToListenIn (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = SwitchToListenInWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > SwitchToListenInWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> SwitchToListenInAsync (string id, MonitoringScopeData monitoringScopeData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await SwitchToListenInAsyncWithHttpInfo(id, monitoringScopeData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch to listen in monitoring mode. Switch the currently monitored voice interaction to listen in mode
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Connection identifier of the call in question.</param>
        /// <param name="monitoringScopeData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> SwitchToListenInAsyncWithHttpInfo (string id, MonitoringScopeData monitoringScopeData = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->SwitchToListenIn");

            var localVarPath = "/voice/calls/{id}/switch-to-listen-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (monitoringScopeData != null && monitoringScopeData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(monitoringScopeData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = monitoringScopeData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SwitchToListenIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data to a call Update the call userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse UpdateUserData (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = UpdateUserDataWithHttpInfo(id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user data to a call Update the call userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > UpdateUserDataWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->UpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->UpdateUserData");

            var localVarPath = "/voice/calls/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data to a call Update the call userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> UpdateUserDataAsync (string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await UpdateUserDataAsyncWithHttpInfo(id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user data to a call Update the call userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">id of the call</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> UpdateUserDataAsyncWithHttpInfo (string id, UserData userData)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VoiceApi->UpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling VoiceApi->UpdateUserData");

            var localVarPath = "/voice/calls/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
