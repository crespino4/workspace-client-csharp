/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;
using Genesys.Workspace.Model;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMediaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accept an open-media interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Accept (string mediatype, string id, AcceptData acceptData = null);

        /// <summary>
        /// Accept an open-media interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> AcceptWithHttpInfo (string mediatype, string id, AcceptData acceptData = null);
        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the interaction data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DeleteUserData (string mediatype, string id, UserData2 userData);

        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the interaction data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DeleteUserDataWithHttpInfo (string mediatype, string id, UserData2 userData);
        /// <summary>
        /// Turn off do not disturb for open media channel
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DndOff ();

        /// <summary>
        /// Turn off do not disturb for open media channel
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DndOffWithHttpInfo ();
        /// <summary>
        /// Turn on do not disturb for open media channels
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for open media channels
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse DndOn ();

        /// <summary>
        /// Turn on do not disturb for open media channels
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for open media channels
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> DndOnWithHttpInfo ();
        /// <summary>
        /// Logout all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse LogoutAgentState ();

        /// <summary>
        /// Logout all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> LogoutAgentStateWithHttpInfo ();
        /// <summary>
        /// Attach user data to an interaction
        /// </summary>
        /// <remarks>
        /// Attach the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaAttachUserData (string mediatype, string id, UserData userData);

        /// <summary>
        /// Attach user data to an interaction
        /// </summary>
        /// <remarks>
        /// Attach the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaAttachUserDataWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Update user data to an interaction
        /// </summary>
        /// <remarks>
        /// Update the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse MediaUpdateUserData (string mediatype, string id, UserData userData);

        /// <summary>
        /// Update user data to an interaction
        /// </summary>
        /// <remarks>
        /// Update the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> MediaUpdateUserDataWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Change to the not ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse NotReadyAgentState ();

        /// <summary>
        /// Change to the not ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> NotReadyAgentStateWithHttpInfo ();
        /// <summary>
        /// Change to the not ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse NotReadyForMedia (string mediatype, NotReadyForMediaData notReadyForMediaData);

        /// <summary>
        /// Change to the not ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> NotReadyForMediaWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData);
        /// <summary>
        /// Place the interaction in queue
        /// </summary>
        /// <remarks>
        /// Place the interaction in queue with modification of properties pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse PlaceInQueue (string mediatype, string id, PlaceInQueueData placeInQueueData);

        /// <summary>
        /// Place the interaction in queue
        /// </summary>
        /// <remarks>
        /// Place the interaction in queue with modification of properties pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> PlaceInQueueWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData);
        /// <summary>
        /// Change to the ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReadyAgentState ();

        /// <summary>
        /// Change to the ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReadyAgentStateWithHttpInfo ();
        /// <summary>
        /// Change to the ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse ReadyForMedia (string mediatype, ReadyForMediaData readyForMediaData = null);

        /// <summary>
        /// Change to the ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> ReadyForMediaWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null);
        /// <summary>
        /// Reject an open-media interaction
        /// </summary>
        /// <remarks>
        /// Reject the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse Reject (string mediatype, string id, AcceptData1 acceptData = null);

        /// <summary>
        /// Reject an open-media interaction
        /// </summary>
        /// <remarks>
        /// Reject the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RejectWithHttpInfo (string mediatype, string id, AcceptData1 acceptData = null);
        /// <summary>
        /// Logout the open media channel
        /// </summary>
        /// <remarks>
        /// Logout the open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        ApiSuccessResponse RemoveMedia (string mediatype, LogoutMediaData logoutMediaData);

        /// <summary>
        /// Logout the open media channel
        /// </summary>
        /// <remarks>
        /// Logout the open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        ApiResponse<ApiSuccessResponse> RemoveMediaWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accept an open-media interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> AcceptAsync (string mediatype, string id, AcceptData acceptData = null);

        /// <summary>
        /// Accept an open-media interaction
        /// </summary>
        /// <remarks>
        /// Accept the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptAsyncWithHttpInfo (string mediatype, string id, AcceptData acceptData = null);
        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the interaction data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataAsync (string mediatype, string id, UserData2 userData);

        /// <summary>
        /// Remove key/value pair from user data
        /// </summary>
        /// <remarks>
        /// Deletes the specified key from the interaction data.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataAsyncWithHttpInfo (string mediatype, string id, UserData2 userData);
        /// <summary>
        /// Turn off do not disturb for open media channel
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DndOffAsync ();

        /// <summary>
        /// Turn off do not disturb for open media channel
        /// </summary>
        /// <remarks>
        /// Turn off do not disturb for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOffAsyncWithHttpInfo ();
        /// <summary>
        /// Turn on do not disturb for open media channels
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for open media channels
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> DndOnAsync ();

        /// <summary>
        /// Turn on do not disturb for open media channels
        /// </summary>
        /// <remarks>
        /// Turn on do not disturb for open media channels
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOnAsyncWithHttpInfo ();
        /// <summary>
        /// Logout all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAgentStateAsync ();

        /// <summary>
        /// Logout all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAgentStateAsyncWithHttpInfo ();
        /// <summary>
        /// Attach user data to an interaction
        /// </summary>
        /// <remarks>
        /// Attach the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaAttachUserDataAsync (string mediatype, string id, UserData userData);

        /// <summary>
        /// Attach user data to an interaction
        /// </summary>
        /// <remarks>
        /// Attach the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaAttachUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Update user data to an interaction
        /// </summary>
        /// <remarks>
        /// Update the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> MediaUpdateUserDataAsync (string mediatype, string id, UserData userData);

        /// <summary>
        /// Update user data to an interaction
        /// </summary>
        /// <remarks>
        /// Update the interaction userdata with the provided key/value pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaUpdateUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData);
        /// <summary>
        /// Change to the not ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyAgentStateAsync ();

        /// <summary>
        /// Change to the not ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyAgentStateAsyncWithHttpInfo ();
        /// <summary>
        /// Change to the not ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyForMediaAsync (string mediatype, NotReadyForMediaData notReadyForMediaData);

        /// <summary>
        /// Change to the not ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the not ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyForMediaAsyncWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData);
        /// <summary>
        /// Place the interaction in queue
        /// </summary>
        /// <remarks>
        /// Place the interaction in queue with modification of properties pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> PlaceInQueueAsync (string mediatype, string id, PlaceInQueueData placeInQueueData);

        /// <summary>
        /// Place the interaction in queue
        /// </summary>
        /// <remarks>
        /// Place the interaction in queue with modification of properties pairs.
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PlaceInQueueAsyncWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData);
        /// <summary>
        /// Change to the ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReadyAgentStateAsync ();

        /// <summary>
        /// Change to the ready state for all open media channels
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyAgentStateAsyncWithHttpInfo ();
        /// <summary>
        /// Change to the ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> ReadyForMediaAsync (string mediatype, ReadyForMediaData readyForMediaData = null);

        /// <summary>
        /// Change to the ready state for open media channel
        /// </summary>
        /// <remarks>
        /// Change to the ready state for open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyForMediaAsyncWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null);
        /// <summary>
        /// Reject an open-media interaction
        /// </summary>
        /// <remarks>
        /// Reject the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RejectAsync (string mediatype, string id, AcceptData1 acceptData = null);

        /// <summary>
        /// Reject an open-media interaction
        /// </summary>
        /// <remarks>
        /// Reject the interaction specified in the id path parameter
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RejectAsyncWithHttpInfo (string mediatype, string id, AcceptData1 acceptData = null);
        /// <summary>
        /// Logout the open media channel
        /// </summary>
        /// <remarks>
        /// Logout the open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        System.Threading.Tasks.Task<ApiSuccessResponse> RemoveMediaAsync (string mediatype, LogoutMediaData logoutMediaData);

        /// <summary>
        /// Logout the open media channel
        /// </summary>
        /// <remarks>
        /// Logout the open media channel
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveMediaAsyncWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MediaApi : IMediaApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MediaApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MediaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MediaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accept an open-media interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Accept (string mediatype, string id, AcceptData acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = AcceptWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accept an open-media interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > AcceptWithHttpInfo (string mediatype, string id, AcceptData acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Accept");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Accept");

            var localVarPath = "/media/{mediatype}/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Accept an open-media interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> AcceptAsync (string mediatype, string id, AcceptData acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await AcceptAsyncWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accept an open-media interaction Accept the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to accept</param>
        /// <param name="id">id of interaction to accept</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> AcceptAsyncWithHttpInfo (string mediatype, string id, AcceptData acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Accept");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Accept");

            var localVarPath = "/media/{mediatype}/interactions/{id}/accept";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Accept", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the interaction data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DeleteUserData (string mediatype, string id, UserData2 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DeleteUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the interaction data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DeleteUserDataWithHttpInfo (string mediatype, string id, UserData2 userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->DeleteUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->DeleteUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->DeleteUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/delete-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the interaction data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DeleteUserDataAsync (string mediatype, string id, UserData2 userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DeleteUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove key/value pair from user data Deletes the specified key from the interaction data.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">The keys of the key/value pairs to delete.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DeleteUserDataAsyncWithHttpInfo (string mediatype, string id, UserData2 userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->DeleteUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->DeleteUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->DeleteUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/delete-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off do not disturb for open media channel Turn off do not disturb for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DndOff ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DndOffWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn off do not disturb for open media channel Turn off do not disturb for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DndOffWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn off do not disturb for open media channel Turn off do not disturb for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DndOffAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DndOffAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn off do not disturb for open media channel Turn off do not disturb for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOffAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-off";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOff", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn on do not disturb for open media channels Turn on do not disturb for open media channels
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse DndOn ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = DndOnWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Turn on do not disturb for open media channels Turn on do not disturb for open media channels
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > DndOnWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Turn on do not disturb for open media channels Turn on do not disturb for open media channels
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> DndOnAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await DndOnAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Turn on do not disturb for open media channels Turn on do not disturb for open media channels
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> DndOnAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/dnd-on";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DndOn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse LogoutAgentState ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = LogoutAgentStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > LogoutAgentStateWithHttpInfo ()
        {

            var localVarPath = "/media/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> LogoutAgentStateAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await LogoutAgentStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> LogoutAgentStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LogoutAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to an interaction Attach the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaAttachUserData (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaAttachUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach user data to an interaction Attach the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaAttachUserDataWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaAttachUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaAttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->MediaAttachUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaAttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Attach user data to an interaction Attach the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaAttachUserDataAsync (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaAttachUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach user data to an interaction Attach the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaAttachUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaAttachUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaAttachUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->MediaAttachUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/attach-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaAttachUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data to an interaction Update the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse MediaUpdateUserData (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = MediaUpdateUserDataWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user data to an interaction Update the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > MediaUpdateUserDataWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaUpdateUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaUpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->MediaUpdateUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaUpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Update user data to an interaction Update the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> MediaUpdateUserDataAsync (string mediatype, string id, UserData userData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await MediaUpdateUserDataAsyncWithHttpInfo(mediatype, id, userData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user data to an interaction Update the interaction userdata with the provided key/value pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="userData">An array of key/value pairs.</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> MediaUpdateUserDataAsyncWithHttpInfo (string mediatype, string id, UserData userData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->MediaUpdateUserData");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->MediaUpdateUserData");
            // verify the required parameter 'userData' is set
            if (userData == null)
                throw new ApiException(400, "Missing required parameter 'userData' when calling MediaApi->MediaUpdateUserData");

            var localVarPath = "/media/{mediatype}/interactions/{id}/update-user-data";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (userData != null && userData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(userData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = userData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MediaUpdateUserData", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse NotReadyAgentState ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = NotReadyAgentStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the not ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > NotReadyAgentStateWithHttpInfo ()
        {

            var localVarPath = "/media/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyAgentStateAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await NotReadyAgentStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the not ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyAgentStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for open media channel Change to the not ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse NotReadyForMedia (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = NotReadyForMediaWithHttpInfo(mediatype, notReadyForMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the not ready state for open media channel Change to the not ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > NotReadyForMediaWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->NotReadyForMedia");
            // verify the required parameter 'notReadyForMediaData' is set
            if (notReadyForMediaData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForMediaData' when calling MediaApi->NotReadyForMedia");

            var localVarPath = "/media/{mediatype}/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (notReadyForMediaData != null && notReadyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the not ready state for open media channel Change to the not ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> NotReadyForMediaAsync (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await NotReadyForMediaAsyncWithHttpInfo(mediatype, notReadyForMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the not ready state for open media channel Change to the not ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="notReadyForMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> NotReadyForMediaAsyncWithHttpInfo (string mediatype, NotReadyForMediaData notReadyForMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->NotReadyForMedia");
            // verify the required parameter 'notReadyForMediaData' is set
            if (notReadyForMediaData == null)
                throw new ApiException(400, "Missing required parameter 'notReadyForMediaData' when calling MediaApi->NotReadyForMedia");

            var localVarPath = "/media/{mediatype}/not-ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (notReadyForMediaData != null && notReadyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(notReadyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = notReadyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place the interaction in queue Place the interaction in queue with modification of properties pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse PlaceInQueue (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = PlaceInQueueWithHttpInfo(mediatype, id, placeInQueueData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Place the interaction in queue Place the interaction in queue with modification of properties pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > PlaceInQueueWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'placeInQueueData' is set
            if (placeInQueueData == null)
                throw new ApiException(400, "Missing required parameter 'placeInQueueData' when calling MediaApi->PlaceInQueue");

            var localVarPath = "/media/{mediatype}/interactions/{id}/place-in-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeInQueueData != null && placeInQueueData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(placeInQueueData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeInQueueData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Place the interaction in queue Place the interaction in queue with modification of properties pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> PlaceInQueueAsync (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await PlaceInQueueAsyncWithHttpInfo(mediatype, id, placeInQueueData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Place the interaction in queue Place the interaction in queue with modification of properties pairs.
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction</param>
        /// <param name="id">id of the interaction</param>
        /// <param name="placeInQueueData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> PlaceInQueueAsyncWithHttpInfo (string mediatype, string id, PlaceInQueueData placeInQueueData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->PlaceInQueue");
            // verify the required parameter 'placeInQueueData' is set
            if (placeInQueueData == null)
                throw new ApiException(400, "Missing required parameter 'placeInQueueData' when calling MediaApi->PlaceInQueue");

            var localVarPath = "/media/{mediatype}/interactions/{id}/place-in-queue";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (placeInQueueData != null && placeInQueueData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(placeInQueueData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = placeInQueueData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PlaceInQueue", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReadyAgentState ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReadyAgentStateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReadyAgentStateWithHttpInfo ()
        {

            var localVarPath = "/media/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReadyAgentStateAsync ()
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReadyAgentStateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the ready state for all open media channels 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyAgentStateAsyncWithHttpInfo ()
        {

            var localVarPath = "/media/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyAgentState", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for open media channel Change to the ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse ReadyForMedia (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = ReadyForMediaWithHttpInfo(mediatype, readyForMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change to the ready state for open media channel Change to the ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > ReadyForMediaWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->ReadyForMedia");

            var localVarPath = "/media/{mediatype}/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (readyForMediaData != null && readyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Change to the ready state for open media channel Change to the ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> ReadyForMediaAsync (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await ReadyForMediaAsyncWithHttpInfo(mediatype, readyForMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change to the ready state for open media channel Change to the ready state for open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="readyForMediaData"> (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> ReadyForMediaAsyncWithHttpInfo (string mediatype, ReadyForMediaData readyForMediaData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->ReadyForMedia");

            var localVarPath = "/media/{mediatype}/ready";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (readyForMediaData != null && readyForMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(readyForMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = readyForMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadyForMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reject an open-media interaction Reject the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse Reject (string mediatype, string id, AcceptData1 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RejectWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reject an open-media interaction Reject the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RejectWithHttpInfo (string mediatype, string id, AcceptData1 acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Reject");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Reject");

            var localVarPath = "/media/{mediatype}/interactions/{id}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Reject an open-media interaction Reject the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RejectAsync (string mediatype, string id, AcceptData1 acceptData = null)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RejectAsyncWithHttpInfo(mediatype, id, acceptData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reject an open-media interaction Reject the interaction specified in the id path parameter
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype">media-type of interaction to reject</param>
        /// <param name="id">id of interaction to reject</param>
        /// <param name="acceptData">Request parameters. (optional)</param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RejectAsyncWithHttpInfo (string mediatype, string id, AcceptData1 acceptData = null)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->Reject");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MediaApi->Reject");

            var localVarPath = "/media/{mediatype}/interactions/{id}/reject";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (acceptData != null && acceptData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(acceptData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = acceptData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Reject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout the open media channel Logout the open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiSuccessResponse</returns>
        public ApiSuccessResponse RemoveMedia (string mediatype, LogoutMediaData logoutMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = RemoveMediaWithHttpInfo(mediatype, logoutMediaData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout the open media channel Logout the open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>ApiResponse of ApiSuccessResponse</returns>
        public ApiResponse< ApiSuccessResponse > RemoveMediaWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveMedia");
            // verify the required parameter 'logoutMediaData' is set
            if (logoutMediaData == null)
                throw new ApiException(400, "Missing required parameter 'logoutMediaData' when calling MediaApi->RemoveMedia");

            var localVarPath = "/media/{mediatype}/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (logoutMediaData != null && logoutMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logoutMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

        /// <summary>
        /// Logout the open media channel Logout the open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiSuccessResponse</returns>
        public async System.Threading.Tasks.Task<ApiSuccessResponse> RemoveMediaAsync (string mediatype, LogoutMediaData logoutMediaData)
        {
             ApiResponse<ApiSuccessResponse> localVarResponse = await RemoveMediaAsyncWithHttpInfo(mediatype, logoutMediaData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout the open media channel Logout the open media channel
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mediatype"></param>
        /// <param name="logoutMediaData"></param>
        /// <returns>Task of ApiResponse (ApiSuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiSuccessResponse>> RemoveMediaAsyncWithHttpInfo (string mediatype, LogoutMediaData logoutMediaData)
        {
            // verify the required parameter 'mediatype' is set
            if (mediatype == null)
                throw new ApiException(400, "Missing required parameter 'mediatype' when calling MediaApi->RemoveMedia");
            // verify the required parameter 'logoutMediaData' is set
            if (logoutMediaData == null)
                throw new ApiException(400, "Missing required parameter 'logoutMediaData' when calling MediaApi->RemoveMedia");

            var localVarPath = "/media/{mediatype}/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (mediatype != null) localVarPathParams.Add("mediatype", Configuration.ApiClient.ParameterToString(mediatype)); // path parameter
            if (logoutMediaData != null && logoutMediaData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(logoutMediaData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = logoutMediaData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMedia", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiSuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiSuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiSuccessResponse)));
        }

    }
}
