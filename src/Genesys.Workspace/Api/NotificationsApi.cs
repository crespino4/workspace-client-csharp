/* 
 * Workspace API
 *
 * Agent API
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Workspace.Client;

namespace Genesys.Workspace.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotificationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Enables subscription to CometD notification API
        /// </summary>
        /// <remarks>
        /// Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Notifications ();

        /// <summary>
        /// Enables subscription to CometD notification API
        /// </summary>
        /// <remarks>
        /// Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsWithHttpInfo ();
        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void NotificationsConnect ();

        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsConnectWithHttpInfo ();
        /// <summary>
        /// Close CometD notification subscriptions
        /// </summary>
        /// <remarks>
        /// Close CometD notification subscriptions
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void NotificationsDisconnect ();

        /// <summary>
        /// Close CometD notification subscriptions
        /// </summary>
        /// <remarks>
        /// Close CometD notification subscriptions
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsDisconnectWithHttpInfo ();
        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void NotificationsHandshake ();

        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsHandshakeWithHttpInfo ();
        /// <summary>
        /// Subscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void NotificationsSubscribe ();

        /// <summary>
        /// Subscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsSubscribeWithHttpInfo ();
        /// <summary>
        /// Unsubscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Unsubscribes CometD channel notification
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void NotificationsUnsubscribe ();

        /// <summary>
        /// Unsubscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Unsubscribes CometD channel notification
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NotificationsUnsubscribeWithHttpInfo ();
        /// <summary>
        /// Enables subscription to SocketIO notifications
        /// </summary>
        /// <remarks>
        /// Enables subscription to SocketIO notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void Socketio ();

        /// <summary>
        /// Enables subscription to SocketIO notifications
        /// </summary>
        /// <remarks>
        /// Enables subscription to SocketIO notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SocketioWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Enables subscription to CometD notification API
        /// </summary>
        /// <remarks>
        /// Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsAsync ();

        /// <summary>
        /// Enables subscription to CometD notification API
        /// </summary>
        /// <remarks>
        /// Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsAsyncWithHttpInfo ();
        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsConnectAsync ();

        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsConnectAsyncWithHttpInfo ();
        /// <summary>
        /// Close CometD notification subscriptions
        /// </summary>
        /// <remarks>
        /// Close CometD notification subscriptions
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsDisconnectAsync ();

        /// <summary>
        /// Close CometD notification subscriptions
        /// </summary>
        /// <remarks>
        /// Close CometD notification subscriptions
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsDisconnectAsyncWithHttpInfo ();
        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsHandshakeAsync ();

        /// <summary>
        /// Subscribes to CometD notifications
        /// </summary>
        /// <remarks>
        /// Subscribes to CometD notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsHandshakeAsyncWithHttpInfo ();
        /// <summary>
        /// Subscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsSubscribeAsync ();

        /// <summary>
        /// Subscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsSubscribeAsyncWithHttpInfo ();
        /// <summary>
        /// Unsubscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Unsubscribes CometD channel notification
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NotificationsUnsubscribeAsync ();

        /// <summary>
        /// Unsubscribes CometD channel notification
        /// </summary>
        /// <remarks>
        /// Unsubscribes CometD channel notification
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsUnsubscribeAsyncWithHttpInfo ();
        /// <summary>
        /// Enables subscription to SocketIO notifications
        /// </summary>
        /// <remarks>
        /// Enables subscription to SocketIO notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SocketioAsync ();

        /// <summary>
        /// Enables subscription to SocketIO notifications
        /// </summary>
        /// <remarks>
        /// Enables subscription to SocketIO notifications
        /// </remarks>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SocketioAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotificationsApi : INotificationsApi
    {
        private Genesys.Workspace.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotificationsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotificationsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Workspace.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Workspace.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Enables subscription to CometD notification API Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Notifications ()
        {
             NotificationsWithHttpInfo();
        }

        /// <summary>
        /// Enables subscription to CometD notification API Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsWithHttpInfo ()
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enables subscription to CometD notification API Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsAsync ()
        {
             await NotificationsAsyncWithHttpInfo();

        }

        /// <summary>
        /// Enables subscription to CometD notification API Receives one of CometD notification events The following events are available&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/initialization&lt;/h5&gt; Value:&lt;br&gt;   {&lt;br&gt;     data : {&lt;br&gt;       state:  &#39;initialization state&#39;&lt;br&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;Complete\&quot;&lt;/b&gt; Initialization was completed successfully&lt;/li&gt;   &lt;li&gt;&lt;b&gt;\&quot;Failed\&quot;&lt;/b&gt;   Initialization failed&lt;/li&gt;         &lt;/ul&gt;&lt;br&gt;     }&lt;br&gt;   }&lt;br&gt; &lt;h5&gt;Channel: /workspace/v3/voice&lt;/h5&gt; Type: &lt;ul&gt;   &lt;li&gt;&lt;b&gt;\&quot;CallStateChanged\&quot;&lt;/b&gt;  Call status or state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         call: {&lt;br&gt;           id: &#39;016202a673223196&#39;,&lt;br&gt;           phoneNumber: &#39;7504772884&#39;,&lt;br&gt;           connId: &#39;016202a673223196&#39;,&lt;br&gt;           callUuid: &#39;00PJ6OJ3OSCMR24QETB382LAES000CIG&#39;,&lt;br&gt;           extensions: [ [list of DN extensions] ],&lt;br&gt;           dnis: &#39;7504772885&#39;,&lt;br&gt;           callType: &#39;Internal&#39;,&lt;br&gt;           state: &#39;state&#39;,&lt;br&gt;   &lt;ul&gt;     &lt;li&gt;&lt;b&gt;\&quot;Ringing\&quot;&lt;/b&gt;  Ringing in progress     &lt;li&gt;&lt;b&gt;\&quot;Dialing\&quot;&lt;/b&gt;  Dialing in progress     &lt;li&gt;&lt;b&gt;\&quot;Established&lt;/b&gt;  Call established     &lt;li&gt;&lt;b&gt;\&quot;Released&lt;/b&gt;  Call released             &lt;/ul&gt; &lt;br&gt;           participants: [ [list of participants] ],&lt;br&gt;           capabilities:&lt;br&gt;             [ &#39;release&#39;,&lt;br&gt;               &#39;clear&#39;,&lt;br&gt;               &#39;attach-user-data&#39;,&lt;br&gt;               &#39;update-user-data&#39;,&lt;br&gt;               &#39;delete-user-data-pair&#39;,&lt;br&gt;               &#39;send-dtmf&#39;,&lt;br&gt;               &#39;start-recording&#39;&lt;br&gt;             ],&lt;br&gt;           duration: 0 &lt;br&gt;         },&lt;br&gt;         type: &#39;CallStateChanged&#39; &lt;br&gt;       }&lt;br&gt;   &lt;li&gt;&lt;b&gt;\&quot;DnStateChanged\&quot;&lt;/b&gt;  DN state changed&lt;/li&gt;     Value:&lt;br&gt;       {&lt;br&gt;         dn: { &lt;br&gt;           number: &#39;7504772884&#39;,&lt;br&gt;           switchName: &#39;ap-southeast-2&#39;,&lt;br&gt;           agentId: &#39;7504772884&#39;,&lt;br&gt;           capabilities: [ &#39;ready&#39;, &#39;not-ready&#39;, &#39;dnd-on&#39;, &#39;set-forward&#39; ],&lt;br&gt;           agentState: &#39;LoggedOut&#39;,&lt;br&gt;           agentWorkMode: &#39;Unknown&#39; &lt;br&gt;         },&lt;br&gt;         type: &#39;DnStateChanged&#39; &lt;br&gt;       } &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Notifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void NotificationsConnect ()
        {
             NotificationsConnectWithHttpInfo();
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsConnectWithHttpInfo ()
        {

            var localVarPath = "/notifications/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsConnectAsync ()
        {
             await NotificationsConnectAsyncWithHttpInfo();

        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsConnectAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsConnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close CometD notification subscriptions Close CometD notification subscriptions
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void NotificationsDisconnect ()
        {
             NotificationsDisconnectWithHttpInfo();
        }

        /// <summary>
        /// Close CometD notification subscriptions Close CometD notification subscriptions
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsDisconnectWithHttpInfo ()
        {

            var localVarPath = "/notifications/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Close CometD notification subscriptions Close CometD notification subscriptions
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsDisconnectAsync ()
        {
             await NotificationsDisconnectAsyncWithHttpInfo();

        }

        /// <summary>
        /// Close CometD notification subscriptions Close CometD notification subscriptions
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsDisconnectAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/disconnect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsDisconnect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void NotificationsHandshake ()
        {
             NotificationsHandshakeWithHttpInfo();
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsHandshakeWithHttpInfo ()
        {

            var localVarPath = "/notifications/handshake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsHandshake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsHandshakeAsync ()
        {
             await NotificationsHandshakeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Subscribes to CometD notifications Subscribes to CometD notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsHandshakeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/handshake";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsHandshake", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes CometD channel notification Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void NotificationsSubscribe ()
        {
             NotificationsSubscribeWithHttpInfo();
        }

        /// <summary>
        /// Subscribes CometD channel notification Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsSubscribeWithHttpInfo ()
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Subscribes CometD channel notification Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsSubscribeAsync ()
        {
             await NotificationsSubscribeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Subscribes CometD channel notification Subscribes CometD channel notification.&lt;br&gt; &lt;h5&gt;The following channels are available right now:&lt;/h5&gt; &lt;ul&gt;   &lt;li&gt;&lt;b&gt;/workspace/v3/initialization&lt;/b&gt; Subscribe for initialization (login) event&lt;/li&gt; &lt;li&gt;&lt;b&gt;/workspace/v3/voice&lt;/b&gt; Subscribe for call state change notification event&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsSubscribeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/subscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsSubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribes CometD channel notification Unsubscribes CometD channel notification
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void NotificationsUnsubscribe ()
        {
             NotificationsUnsubscribeWithHttpInfo();
        }

        /// <summary>
        /// Unsubscribes CometD channel notification Unsubscribes CometD channel notification
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NotificationsUnsubscribeWithHttpInfo ()
        {

            var localVarPath = "/notifications/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Unsubscribes CometD channel notification Unsubscribes CometD channel notification
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NotificationsUnsubscribeAsync ()
        {
             await NotificationsUnsubscribeAsyncWithHttpInfo();

        }

        /// <summary>
        /// Unsubscribes CometD channel notification Unsubscribes CometD channel notification
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NotificationsUnsubscribeAsyncWithHttpInfo ()
        {

            var localVarPath = "/notifications/unsubscribe";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NotificationsUnsubscribe", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enables subscription to SocketIO notifications Enables subscription to SocketIO notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void Socketio ()
        {
             SocketioWithHttpInfo();
        }

        /// <summary>
        /// Enables subscription to SocketIO notifications Enables subscription to SocketIO notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SocketioWithHttpInfo ()
        {

            var localVarPath = "/socket.io";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Socketio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enables subscription to SocketIO notifications Enables subscription to SocketIO notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SocketioAsync ()
        {
             await SocketioAsyncWithHttpInfo();

        }

        /// <summary>
        /// Enables subscription to SocketIO notifications Enables subscription to SocketIO notifications
        /// </summary>
        /// <exception cref="Genesys.Workspace.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SocketioAsyncWithHttpInfo ()
        {

            var localVarPath = "/socket.io";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Socketio", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
